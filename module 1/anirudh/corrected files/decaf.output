Terminals unused in grammar

   HEX_LITERAL
   IF
   ELSE
   FOR
   BREAK
   CONTINUE
   RETURN
   VOID


State 54 conflicts: 5 shift/reduce


Grammar

    0 $accept: Program $end

    1 Program: CLASS IDENTIFIER START_BLOCK declarations CLOSE_BLOCK

    2 declarations: %empty
    3             | decl declarations

    4 decl: field_decl
    5     | statement_decl

    6 field_decl: type field_element_list SEMI_COLON

    7 type: TYPE

    8 field_element_list: Field_Element COMMA field_element_list
    9                   | Field_Element

   10 Field_Element: IDENTIFIER
   11              | IDENTIFIER OPEN_SQUARE_BRACKET DECIMAL_LITERAL CLOSE_SQUARE_BRACKET

   12 statement_decl: location ASSIGNMENT_OP expr
   13               | CALLOUT OPEN_PARENTHESIS STRING_LITERAL OPEN_SQUARE_BRACKET COMMA callout_arg COMMA CLOSE_SQUARE_BRACKET CLOSE_PARENTHESIS

   14 location: IDENTIFIER
   15         | IDENTIFIER OPEN_SQUARE_BRACKET expr CLOSE_SQUARE_BRACKET

   16 expr: binary_exp
   17     | unary_op binary_exp

   18 binary_exp: common_expr
   19           | binary_exp binary_op binary_exp

   20 common_expr: location
   21            | literal
   22            | OPEN_PARENTHESIS expr CLOSE_PARENTHESIS

   23 literal: DECIMAL_LITERAL
   24        | CHAR_LITERAL
   25        | BOOLEAN_LITERAL
   26        | STRING_LITERAL

   27 binary_op: OP_MINUS
   28          | ARITHMETIC_OP
   29          | RELATIONAL_OP
   30          | EQUALITY_OP
   31          | CONDITIONAL_OP

   32 unary_op: OP_MINUS
   33         | NEGATION

   34 callout_arg: expr


Terminals, with rules where they appear

$end (0) 0
error (256)
IDENTIFIER (258) 1 10 11 14 15
TYPE (259) 7
BOOLEAN_LITERAL (260) 25
STRING_LITERAL (261) 13 26
CHAR_LITERAL (262) 24
HEX_LITERAL (263)
DECIMAL_LITERAL (264) 11 23
RELATIONAL_OP (265) 29
CONDITIONAL_OP (266) 31
ARITHMETIC_OP (267) 28
ASSIGNMENT_OP (268) 12
EQUALITY_OP (269) 30
CLASS (270) 1
SEMI_COLON (271) 6
COMMA (272) 8 13
CALLOUT (273) 13
IF (274)
ELSE (275)
FOR (276)
BREAK (277)
CONTINUE (278)
RETURN (279)
VOID (280)
START_BLOCK (281) 1
CLOSE_BLOCK (282) 1
OPEN_SQUARE_BRACKET (283) 11 13 15
CLOSE_SQUARE_BRACKET (284) 11 13 15
OPEN_PARENTHESIS (285) 13 22
CLOSE_PARENTHESIS (286) 13 22
NEGATION (287) 33
OP_MINUS (288) 27 32


Nonterminals, with rules where they appear

$accept (34)
    on left: 0
Program (35)
    on left: 1, on right: 0
declarations (36)
    on left: 2 3, on right: 1 3
decl (37)
    on left: 4 5, on right: 3
field_decl (38)
    on left: 6, on right: 4
type (39)
    on left: 7, on right: 6
field_element_list (40)
    on left: 8 9, on right: 6 8
Field_Element (41)
    on left: 10 11, on right: 8 9
statement_decl (42)
    on left: 12 13, on right: 5
location (43)
    on left: 14 15, on right: 12 20
expr (44)
    on left: 16 17, on right: 12 15 22 34
binary_exp (45)
    on left: 18 19, on right: 16 17 19
common_expr (46)
    on left: 20 21 22, on right: 18
literal (47)
    on left: 23 24 25 26, on right: 21
binary_op (48)
    on left: 27 28 29 30 31, on right: 19
unary_op (49)
    on left: 32 33, on right: 17
callout_arg (50)
    on left: 34, on right: 13


State 0

    0 $accept: . Program $end

    CLASS  shift, and go to state 1

    Program  go to state 2


State 1

    1 Program: CLASS . IDENTIFIER START_BLOCK declarations CLOSE_BLOCK

    IDENTIFIER  shift, and go to state 3


State 2

    0 $accept: Program . $end

    $end  shift, and go to state 4


State 3

    1 Program: CLASS IDENTIFIER . START_BLOCK declarations CLOSE_BLOCK

    START_BLOCK  shift, and go to state 5


State 4

    0 $accept: Program $end .

    $default  accept


State 5

    1 Program: CLASS IDENTIFIER START_BLOCK . declarations CLOSE_BLOCK

    IDENTIFIER  shift, and go to state 6
    TYPE        shift, and go to state 7
    CALLOUT     shift, and go to state 8

    $default  reduce using rule 2 (declarations)

    declarations    go to state 9
    decl            go to state 10
    field_decl      go to state 11
    type            go to state 12
    statement_decl  go to state 13
    location        go to state 14


State 6

   14 location: IDENTIFIER .
   15         | IDENTIFIER . OPEN_SQUARE_BRACKET expr CLOSE_SQUARE_BRACKET

    OPEN_SQUARE_BRACKET  shift, and go to state 15

    $default  reduce using rule 14 (location)


State 7

    7 type: TYPE .

    $default  reduce using rule 7 (type)


State 8

   13 statement_decl: CALLOUT . OPEN_PARENTHESIS STRING_LITERAL OPEN_SQUARE_BRACKET COMMA callout_arg COMMA CLOSE_SQUARE_BRACKET CLOSE_PARENTHESIS

    OPEN_PARENTHESIS  shift, and go to state 16


State 9

    1 Program: CLASS IDENTIFIER START_BLOCK declarations . CLOSE_BLOCK

    CLOSE_BLOCK  shift, and go to state 17


State 10

    3 declarations: decl . declarations

    IDENTIFIER  shift, and go to state 6
    TYPE        shift, and go to state 7
    CALLOUT     shift, and go to state 8

    $default  reduce using rule 2 (declarations)

    declarations    go to state 18
    decl            go to state 10
    field_decl      go to state 11
    type            go to state 12
    statement_decl  go to state 13
    location        go to state 14


State 11

    4 decl: field_decl .

    $default  reduce using rule 4 (decl)


State 12

    6 field_decl: type . field_element_list SEMI_COLON

    IDENTIFIER  shift, and go to state 19

    field_element_list  go to state 20
    Field_Element       go to state 21


State 13

    5 decl: statement_decl .

    $default  reduce using rule 5 (decl)


State 14

   12 statement_decl: location . ASSIGNMENT_OP expr

    ASSIGNMENT_OP  shift, and go to state 22


State 15

   15 location: IDENTIFIER OPEN_SQUARE_BRACKET . expr CLOSE_SQUARE_BRACKET

    IDENTIFIER        shift, and go to state 6
    BOOLEAN_LITERAL   shift, and go to state 23
    STRING_LITERAL    shift, and go to state 24
    CHAR_LITERAL      shift, and go to state 25
    DECIMAL_LITERAL   shift, and go to state 26
    OPEN_PARENTHESIS  shift, and go to state 27
    NEGATION          shift, and go to state 28
    OP_MINUS          shift, and go to state 29

    location     go to state 30
    expr         go to state 31
    binary_exp   go to state 32
    common_expr  go to state 33
    literal      go to state 34
    unary_op     go to state 35


State 16

   13 statement_decl: CALLOUT OPEN_PARENTHESIS . STRING_LITERAL OPEN_SQUARE_BRACKET COMMA callout_arg COMMA CLOSE_SQUARE_BRACKET CLOSE_PARENTHESIS

    STRING_LITERAL  shift, and go to state 36


State 17

    1 Program: CLASS IDENTIFIER START_BLOCK declarations CLOSE_BLOCK .

    $default  reduce using rule 1 (Program)


State 18

    3 declarations: decl declarations .

    $default  reduce using rule 3 (declarations)


State 19

   10 Field_Element: IDENTIFIER .
   11              | IDENTIFIER . OPEN_SQUARE_BRACKET DECIMAL_LITERAL CLOSE_SQUARE_BRACKET

    OPEN_SQUARE_BRACKET  shift, and go to state 37

    $default  reduce using rule 10 (Field_Element)


State 20

    6 field_decl: type field_element_list . SEMI_COLON

    SEMI_COLON  shift, and go to state 38


State 21

    8 field_element_list: Field_Element . COMMA field_element_list
    9                   | Field_Element .

    COMMA  shift, and go to state 39

    $default  reduce using rule 9 (field_element_list)


State 22

   12 statement_decl: location ASSIGNMENT_OP . expr

    IDENTIFIER        shift, and go to state 6
    BOOLEAN_LITERAL   shift, and go to state 23
    STRING_LITERAL    shift, and go to state 24
    CHAR_LITERAL      shift, and go to state 25
    DECIMAL_LITERAL   shift, and go to state 26
    OPEN_PARENTHESIS  shift, and go to state 27
    NEGATION          shift, and go to state 28
    OP_MINUS          shift, and go to state 29

    location     go to state 30
    expr         go to state 40
    binary_exp   go to state 32
    common_expr  go to state 33
    literal      go to state 34
    unary_op     go to state 35


State 23

   25 literal: BOOLEAN_LITERAL .

    $default  reduce using rule 25 (literal)


State 24

   26 literal: STRING_LITERAL .

    $default  reduce using rule 26 (literal)


State 25

   24 literal: CHAR_LITERAL .

    $default  reduce using rule 24 (literal)


State 26

   23 literal: DECIMAL_LITERAL .

    $default  reduce using rule 23 (literal)


State 27

   22 common_expr: OPEN_PARENTHESIS . expr CLOSE_PARENTHESIS

    IDENTIFIER        shift, and go to state 6
    BOOLEAN_LITERAL   shift, and go to state 23
    STRING_LITERAL    shift, and go to state 24
    CHAR_LITERAL      shift, and go to state 25
    DECIMAL_LITERAL   shift, and go to state 26
    OPEN_PARENTHESIS  shift, and go to state 27
    NEGATION          shift, and go to state 28
    OP_MINUS          shift, and go to state 29

    location     go to state 30
    expr         go to state 41
    binary_exp   go to state 32
    common_expr  go to state 33
    literal      go to state 34
    unary_op     go to state 35


State 28

   33 unary_op: NEGATION .

    $default  reduce using rule 33 (unary_op)


State 29

   32 unary_op: OP_MINUS .

    $default  reduce using rule 32 (unary_op)


State 30

   20 common_expr: location .

    $default  reduce using rule 20 (common_expr)


State 31

   15 location: IDENTIFIER OPEN_SQUARE_BRACKET expr . CLOSE_SQUARE_BRACKET

    CLOSE_SQUARE_BRACKET  shift, and go to state 42


State 32

   16 expr: binary_exp .
   19 binary_exp: binary_exp . binary_op binary_exp

    RELATIONAL_OP   shift, and go to state 43
    CONDITIONAL_OP  shift, and go to state 44
    ARITHMETIC_OP   shift, and go to state 45
    EQUALITY_OP     shift, and go to state 46
    OP_MINUS        shift, and go to state 47

    $default  reduce using rule 16 (expr)

    binary_op  go to state 48


State 33

   18 binary_exp: common_expr .

    $default  reduce using rule 18 (binary_exp)


State 34

   21 common_expr: literal .

    $default  reduce using rule 21 (common_expr)


State 35

   17 expr: unary_op . binary_exp

    IDENTIFIER        shift, and go to state 6
    BOOLEAN_LITERAL   shift, and go to state 23
    STRING_LITERAL    shift, and go to state 24
    CHAR_LITERAL      shift, and go to state 25
    DECIMAL_LITERAL   shift, and go to state 26
    OPEN_PARENTHESIS  shift, and go to state 27

    location     go to state 30
    binary_exp   go to state 49
    common_expr  go to state 33
    literal      go to state 34


State 36

   13 statement_decl: CALLOUT OPEN_PARENTHESIS STRING_LITERAL . OPEN_SQUARE_BRACKET COMMA callout_arg COMMA CLOSE_SQUARE_BRACKET CLOSE_PARENTHESIS

    OPEN_SQUARE_BRACKET  shift, and go to state 50


State 37

   11 Field_Element: IDENTIFIER OPEN_SQUARE_BRACKET . DECIMAL_LITERAL CLOSE_SQUARE_BRACKET

    DECIMAL_LITERAL  shift, and go to state 51


State 38

    6 field_decl: type field_element_list SEMI_COLON .

    $default  reduce using rule 6 (field_decl)


State 39

    8 field_element_list: Field_Element COMMA . field_element_list

    IDENTIFIER  shift, and go to state 19

    field_element_list  go to state 52
    Field_Element       go to state 21


State 40

   12 statement_decl: location ASSIGNMENT_OP expr .

    $default  reduce using rule 12 (statement_decl)


State 41

   22 common_expr: OPEN_PARENTHESIS expr . CLOSE_PARENTHESIS

    CLOSE_PARENTHESIS  shift, and go to state 53


State 42

   15 location: IDENTIFIER OPEN_SQUARE_BRACKET expr CLOSE_SQUARE_BRACKET .

    $default  reduce using rule 15 (location)


State 43

   29 binary_op: RELATIONAL_OP .

    $default  reduce using rule 29 (binary_op)


State 44

   31 binary_op: CONDITIONAL_OP .

    $default  reduce using rule 31 (binary_op)


State 45

   28 binary_op: ARITHMETIC_OP .

    $default  reduce using rule 28 (binary_op)


State 46

   30 binary_op: EQUALITY_OP .

    $default  reduce using rule 30 (binary_op)


State 47

   27 binary_op: OP_MINUS .

    $default  reduce using rule 27 (binary_op)


State 48

   19 binary_exp: binary_exp binary_op . binary_exp

    IDENTIFIER        shift, and go to state 6
    BOOLEAN_LITERAL   shift, and go to state 23
    STRING_LITERAL    shift, and go to state 24
    CHAR_LITERAL      shift, and go to state 25
    DECIMAL_LITERAL   shift, and go to state 26
    OPEN_PARENTHESIS  shift, and go to state 27

    location     go to state 30
    binary_exp   go to state 54
    common_expr  go to state 33
    literal      go to state 34


State 49

   17 expr: unary_op binary_exp .
   19 binary_exp: binary_exp . binary_op binary_exp

    RELATIONAL_OP   shift, and go to state 43
    CONDITIONAL_OP  shift, and go to state 44
    ARITHMETIC_OP   shift, and go to state 45
    EQUALITY_OP     shift, and go to state 46
    OP_MINUS        shift, and go to state 47

    $default  reduce using rule 17 (expr)

    binary_op  go to state 48


State 50

   13 statement_decl: CALLOUT OPEN_PARENTHESIS STRING_LITERAL OPEN_SQUARE_BRACKET . COMMA callout_arg COMMA CLOSE_SQUARE_BRACKET CLOSE_PARENTHESIS

    COMMA  shift, and go to state 55


State 51

   11 Field_Element: IDENTIFIER OPEN_SQUARE_BRACKET DECIMAL_LITERAL . CLOSE_SQUARE_BRACKET

    CLOSE_SQUARE_BRACKET  shift, and go to state 56


State 52

    8 field_element_list: Field_Element COMMA field_element_list .

    $default  reduce using rule 8 (field_element_list)


State 53

   22 common_expr: OPEN_PARENTHESIS expr CLOSE_PARENTHESIS .

    $default  reduce using rule 22 (common_expr)


State 54

   19 binary_exp: binary_exp . binary_op binary_exp
   19           | binary_exp binary_op binary_exp .

    RELATIONAL_OP   shift, and go to state 43
    CONDITIONAL_OP  shift, and go to state 44
    ARITHMETIC_OP   shift, and go to state 45
    EQUALITY_OP     shift, and go to state 46
    OP_MINUS        shift, and go to state 47

    RELATIONAL_OP   [reduce using rule 19 (binary_exp)]
    CONDITIONAL_OP  [reduce using rule 19 (binary_exp)]
    ARITHMETIC_OP   [reduce using rule 19 (binary_exp)]
    EQUALITY_OP     [reduce using rule 19 (binary_exp)]
    OP_MINUS        [reduce using rule 19 (binary_exp)]
    $default        reduce using rule 19 (binary_exp)

    binary_op  go to state 48


State 55

   13 statement_decl: CALLOUT OPEN_PARENTHESIS STRING_LITERAL OPEN_SQUARE_BRACKET COMMA . callout_arg COMMA CLOSE_SQUARE_BRACKET CLOSE_PARENTHESIS

    IDENTIFIER        shift, and go to state 6
    BOOLEAN_LITERAL   shift, and go to state 23
    STRING_LITERAL    shift, and go to state 24
    CHAR_LITERAL      shift, and go to state 25
    DECIMAL_LITERAL   shift, and go to state 26
    OPEN_PARENTHESIS  shift, and go to state 27
    NEGATION          shift, and go to state 28
    OP_MINUS          shift, and go to state 29

    location     go to state 30
    expr         go to state 57
    binary_exp   go to state 32
    common_expr  go to state 33
    literal      go to state 34
    unary_op     go to state 35
    callout_arg  go to state 58


State 56

   11 Field_Element: IDENTIFIER OPEN_SQUARE_BRACKET DECIMAL_LITERAL CLOSE_SQUARE_BRACKET .

    $default  reduce using rule 11 (Field_Element)


State 57

   34 callout_arg: expr .

    $default  reduce using rule 34 (callout_arg)


State 58

   13 statement_decl: CALLOUT OPEN_PARENTHESIS STRING_LITERAL OPEN_SQUARE_BRACKET COMMA callout_arg . COMMA CLOSE_SQUARE_BRACKET CLOSE_PARENTHESIS

    COMMA  shift, and go to state 59


State 59

   13 statement_decl: CALLOUT OPEN_PARENTHESIS STRING_LITERAL OPEN_SQUARE_BRACKET COMMA callout_arg COMMA . CLOSE_SQUARE_BRACKET CLOSE_PARENTHESIS

    CLOSE_SQUARE_BRACKET  shift, and go to state 60


State 60

   13 statement_decl: CALLOUT OPEN_PARENTHESIS STRING_LITERAL OPEN_SQUARE_BRACKET COMMA callout_arg COMMA CLOSE_SQUARE_BRACKET . CLOSE_PARENTHESIS

    CLOSE_PARENTHESIS  shift, and go to state 61


State 61

   13 statement_decl: CALLOUT OPEN_PARENTHESIS STRING_LITERAL OPEN_SQUARE_BRACKET COMMA callout_arg COMMA CLOSE_SQUARE_BRACKET CLOSE_PARENTHESIS .

    $default  reduce using rule 13 (statement_decl)
