%{
#include <iostream>
#include <cstdio>
#include "decaf_bison.tab.h"
#define YY_DECL extern "C" int yylex()

using namespace std;

%}

DIGIT [0-9]
ALPHA [a-zA-Z]

%%
[\t\n]							;


"-"								{return OP_MINUS;}

\!								{return NOT_OP;}

\+								|
\*								|
\/								|
\%								{return ARITH_OP;}

\>								|
\<								|
\>=								|
\<=								{return REL_OP;}

!=								|
\=\=								{return EQ_OP;}

&&								|
\|\|								{return COND_OP;}

\=								|
\+=								|
-=								{return ASSIGN_OP;}

; 								{return SEMI_COLON;}
, 								{return COMMA;}
class 								{return CLASS;}
void								{return VOID;}
int								{return INT_TYPE;}
boolean								{return BOOL_TYPE;}
if								{return IF;}
else								{return ELSE;}
for								{return FOR;}
return								{return RETURN;}
break								{return BREAK;}
continue							{return CONTINUE;}
callout								{return CALLOUT_FUNCTION;}
true								|
false								{cout<<"BOOL_CONSTANT"<<endl;}

\"(\\.|[^\\"])*\" { 
    return STRING_LITERAL; 
}
"\'\\n\'"|"\'\\t\'"|"\'\\\\\'"|"\'\\\'\'"|"\'\\\"\'"|"\'"."\'" {
    return CHAR_LITERAL;
}
DIGIT+								{return INT_LITERAL;}
"0X"[0-9a-fA-F]+ 						{return INT_LITERAL;}
[a-zA-Z][0-9a-zA-Z]*						{return IDENTIFIER;}

\[								{return START_SQUARE_BRACKET;}
\]								{return CLOSE_SQUARE_BRACKET;}
\{								{return START_BLOCK;}
\}								{return CLOSE_BLOCK;}
\(								{return START_PARANTHESIS;}
\)								{return CLOSE_PARANTHESIS;}
. 								{ printf("unsuccessful\n");}
%%
int main(int, char**) {
	
	// open a file handle to a particular file:
	FILE *myfile = fopen("test_program", "r");
	// make sure it's valid:
	if (!myfile) {
		cout << "I can't open a.snazzle.file!" << endl;
		return -1;
	}
	// set lex to read from it instead of defaulting to STDIN:
	yyin = myfile;
	
	// lex through the input:
	yylex();
}
